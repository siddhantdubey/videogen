import requests
import json
import dotenv

import openai
import pyttsx3
from gtts import gTTS

openai.api_key = dotenv.get_key(".env", "OPENAI_KEY")

def get_pexels_video_url(query: str) -> str:
    """
    Gets a video from pexels related a certain search query
    params:
        query: str, the thing to search for
    returns:
        str, the url of the video
    """
    endpoint = "https://api.pexels.com/videos/search"
    api_key = dotenv.get_key(".env", "PEXELS_KEY")
    res = requests.get(endpoint, params={"query": query,
                                         "orientation": "portrait"},
                       headers={"Authorization": api_key})
    if res.status_code == 200:
        return json.loads(res.content)["videos"][0]["video_files"][0]["link"]
    else:
        return ""


def download_video(url: str, fname: str) -> None:
    """
    Downloads a video from a url
    params:
        url: str, the url of the videos
        fname: str, the name of the file to save the video as
    """
    res = requests.get(url)
    with open(fname, "wb") as f:
        f.write(res.content)


def generate_script(topic: str) -> str:
    """
    Generates a script from openai api
    params:
        topic: str, the topic of the script
    returns:
        str, the script generated by openai
    """
    pre_prompt = "You are a video maker, and you are writing a script for a \
        video about " + topic + ". The video will be about 1 minute long. \
        Write a script for the video that you" + " think \
        would be interesting to watch. Write only the voiceover script and nothing else. Write it after the end of this prompt. Voiceover:"
    completion = openai.Completion.create(model="text-davinci-003",
                                          prompt=pre_prompt,
                                          max_tokens=200,
                                          temperature=0.9)
    return completion["choices"][0]["text"]

def gen_audio(text: str, fname: str) -> None:
    """
    Converts text to speech.
    params:
        text: str, the text to convert to speech
        fname: str, the name of the file to save the speech as
    """
    tts = gTTS(text=text, lang="en")
    with open(fname, "wb") as f:
        tts.write_to_fp(f)
